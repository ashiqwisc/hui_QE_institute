confidence.interval = "box") %>%
ena.plot.network(network = mid_mean, colors = c("blue"), labels = FALSE)
plot_mid$plot
plot_high = ena.plot(set, title = "Mean High Network") %>%
#  ena.plot.points(points = high_points, colors = c("orange")) %>%
ena.plot.group(points = high_points, colors =c("purple"),
confidence.interval = "box") %>%
ena.plot.network(network = high_mean, colors = c("purple"), labels = FALSE)
plot_high$plot
# Low vs Mid
subtracted_low_mid = low_mean - mid_mean
low_v_mid <- ena.plot(set, title = "Low v. Mid", font.family = "Times") %>%
ena.plot.group(point = low_points, colors =c("red"),
confidence.interval = "box") %>%
ena.plot.group(point = mid_points, colors =c("blue"),
confidence.interval = "box") %>%
ena.plot.network(network = subtracted_low_mid * 6, colors = c("red", "blue"), labels = FALSE)
low_v_mid$plot
# Low vs. High
subtracted_low_high = low_mean - high_mean
low_v_high <- ena.plot(set, title = "Low v. High", font.family = "Times") %>%
ena.plot.group(point = low_points, colors =c("red"),
confidence.interval = "box") %>%
ena.plot.group(point = high_points, colors =c("purple"),
confidence.interval = "box") %>%
ena.plot.network(network = subtracted_low_high * 6, colors = c("red", "purple"), labels = FALSE)
low_v_high$plot
# Mid vs. High
subtracted_mid_high = mid_mean - high_mean
mid_v_high <- ena.plot(set, title = "Mid v. High", font.family = "Times") %>%
ena.plot.group(point = mid_points, colors =c("blue"),
confidence.interval = "box") %>%
ena.plot.group(point = high_points, colors =c("purple"),
confidence.interval = "box") %>%
ena.plot.network(network = subtracted_mid_high * 6, colors = c("blue", "purple"), labels = FALSE)
mid_v_high$plot
ena_scores <- ena.plot(set, title = "ENA Scores", font.family = "Times") %>%
ena.plot.group(point = low_points, colors =c("red"),
confidence.interval = "box") %>%
ena.plot.group(point = mid_points, colors =c("blue"),
confidence.interval = "box") %>%
ena.plot.group(point = high_points, colors =c("purple"),
confidence.interval = "box")
ena_scores$plot
library(effsize)
# Can't verify that ENA scores are normally distributed, sample size too big for Shapiro-Wilk test to verify normality. Assumption of independence satisfied, proceed with Mann-Whitney U-Test instead.
# low <- set$points$commitment_level$low$SVD1
# mid <- set$points$commitment_level$mid$SVD1
# high <- set$points$commitment_level$high$SVD1
low <- set$points$commitment_level$low$MR1
mid <- set$points$commitment_level$mid$MR1
high <- set$points$commitment_level$high$MR1
# Low v. Mid
# Mann-Whitney
wilcox.test(low, mid)
# Cohen's d
cohen.d(low, mid)
# Low v. High
# Mann-Whitney
wilcox.test(low, high)
# Cohen's d
cohen.d(low, high)
# Mid v. High
# Mann-Whitney
wilcox.test(mid, high)
# Cohen's d
cohen.d(mid, high)
library(effsize)
# Can't verify that ENA scores are normally distributed, sample size too big for Shapiro-Wilk test to verify normality. Assumption of independence satisfied, proceed with Mann-Whitney U-Test instead.
low <- set$points$commitment_level$low$SVD1
library(effsize)
# Can't verify that ENA scores are normally distributed, sample size too big for Shapiro-Wilk test to verify normality. Assumption of independence satisfied, proceed with Mann-Whitney U-Test instead.
low <- set$points$commitment_level$low$SVD2
mid <- set$points$commitment_level$mid$SVD2
high <- set$points$commitment_level$high$SVD2
# low <- set$points$commitment_level$low$MR1
# mid <- set$points$commitment_level$mid$MR1
# high <- set$points$commitment_level$high$MR1
# Low v. Mid
# Mann-Whitney
wilcox.test(low, mid)
# Cohen's d
cohen.d(low, mid)
# Low v. High
# Mann-Whitney
wilcox.test(low, high)
# Cohen's d
cohen.d(low, high)
# Mid v. High
# Mann-Whitney
wilcox.test(mid, high)
# Cohen's d
cohen.d(mid, high)
# Read in dataset, remove unnecessary columns
df <- read.csv("~/Desktop/epistemic_analytics/lyon_collab/data/LetsPlay_TMA_1stmodel.csv") %>%
select(-X)
# Fix line 6502
df[6502,6] <- "gaze"
df[6502,15]<- 1
df[,15] <- as.numeric(df[,15])
# Combine phatic gazes into one column
df <- df %>%
mutate(`phatic.gazes` = phatic.gazes_Player.1 + phatic.gazes_Player.2 + phatic.gazes_Player.3 + phatic.gazes_Player.4) %>%
mutate(`phatic.gazes` = case_when(phatic.gazes > 0 ~ 1, phatic.gazes == 0 ~ 0))
# Reinstallation sequence for ONA package
# remove.packages("ona")
# install.packages("ona", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/ona/cran/", "https://cran.rstudio.org"))
# remove.packages("tma")
# install.packages("tma", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/tma/cran/", "https://cran.rstudio.org"))
# Load necessary libraries
library(rENA)
library(ona)
library(tma)
library(readxl)
library(tidyverse)
# Source plotter code
# source("~/Desktop/epistemic_analytics/lyon_collab/code/ona_plotter_lyon.R")
df %>% select(phatic.gazes) %>% summarize(n = sum())
df %>% summarize(n = sum(phatic.gazes))
1279/10835
df %>% summarize(n = sum(Intercomprehension.checks_VIC.individuelle))
12/10835
df %>% summarize(n = sum(Intercomprehension.checks_VIC.collective))
28/10835
# Set local working directory
# setwd("~/Desktop/epistemic_analytics/lyon_collab")
# knitr::opts_knit$set(root.dir = '~/Documents/GitHub/lyon_collab')
# Reinstallation sequence for ONA package
# remove.packages("ona")
# install.packages("ona", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/ona/cran/", "https://cran.rstudio.org"))
# remove.packages("tma")
# install.packages("tma", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/tma/cran/", "https://cran.rstudio.org"))
# Load necessary libraries
library(rENA)
library(ona)
library(tma)
library(readxl)
library(tidyverse)
# Source plotter code
# source("~/Desktop/epistemic_analytics/lyon_collab/code/ona_plotter_lyon.R")
# Read in dataset, remove unnecessary columns
df <- read.csv("~/Desktop/epistemic_analytics/lyon_collab/data/LetsPlay_TMA_1stmodel.csv") %>%
select(-X)
# Fix line 6502
df[6502,6] <- "gaze"
df[6502,15]<- 1
df[,15] <- as.numeric(df[,15])
# Define units, codes, metadata, and HOO rules
unit_cols <- c("classroom", "group", "actor")
code_cols <- c("multimodal.relevance_correct..hors.pertinence.linguistique.", "multimodal.relevance_correct.and.complete", "multimodal.relevance_correct.and.incomplete", "multimodal.relevance_incorrect","verbal.relevance_correct.and.complete",            "verbal.relevance_correct.and.incomplete", "verbal.relevance_incorrect")
meta_cols <- c("qualitative_content", "Rules")
HOO_rules_model <- tma:::rules(
classroom %in% UNIT$classroom & group %in% UNIT$group
)
context_model <- tma:::contexts(
x = df,
units = unit_cols,
hoo_rules = HOO_rules_model
)
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$Modality
if(mod == "verbal")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 10))*1
if(mod == "gesture")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 10))*1
if(mod == "gaze")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 5))*1
else
return(0)
},
time.column = "Start",
return.ena.set = FALSE,
mode.column = "Modality"
)
# Make set
ona_multimodal_tif_set <- model(ona_multimodal_tif_accum)
# Pearson's R
ona_multimodal_tif_gof <- ona:::correlations(ona_multimodal_tif_set)$pearson
ona_multimodal_tif_gof[[1]]
ona_multimodal_tif_SVD <- lm(ona_multimodal_tif_set$points$SVD1 ~ ona_multimodal_tif_set$points$classroom) %>% summary()
ona_multimodal_tif_SVD$r.squared
source("~/Desktop/epistemic_analytics/lyon_collab/code/rq_ona_plotter_lyon.R")
# Plot ONA plot
make.ona.plot(ona_multimodal_tif_set,
"Lyon Multimodal Model")
# Pairwise t test with BH corrections, providing statistical warrant for ONA-score-togetherness observation
pairwise.t.test(ona_multimodal_tif_set$points$SVD1, ona_multimodal_tif_set$points$classroom, p.adjust.method = "BH")
# Set local working directory
# setwd("~/Desktop/epistemic_analytics/lyon_collab")
# knitr::opts_knit$set(root.dir = '~/Documents/GitHub/lyon_collab')
# Reinstallation sequence for ONA package
# remove.packages("ona")
# install.packages("ona", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/ona/cran/", "https://cran.rstudio.org"))
# remove.packages("tma")
# install.packages("tma", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/tma/cran/", "https://cran.rstudio.org"))
# Load necessary libraries
library(rENA)
library(ona)
library(tma)
library(readxl)
library(tidyverse)
# Source plotter code
# source("~/Desktop/epistemic_analytics/lyon_collab/code/ona_plotter_lyon.R")
# Read in dataset, remove unnecessary columns
df <- read.csv("~/Desktop/epistemic_analytics/lyon_collab/data/LetsPlay_TMA_1stmodel.csv") %>%
select(-X)
# Fix line 6502
df[6502,6] <- "gaze"
df[6502,15]<- 1
df[,15] <- as.numeric(df[,15])
# Define units, codes, metadata, and HOO rules
unit_cols <- c("classroom", "group", "actor")
code_cols <- c("multimodal.relevance_correct..hors.pertinence.linguistique.", "multimodal.relevance_correct.and.complete", "multimodal.relevance_correct.and.incomplete", "multimodal.relevance_incorrect","verbal.relevance_correct.and.complete",            "verbal.relevance_correct.and.incomplete", "verbal.relevance_incorrect")
meta_cols <- c("qualitative_content", "Rules")
HOO_rules_model <- tma:::rules(
classroom %in% UNIT$classroom & group %in% UNIT$group
)
context_model <- tma:::contexts(
x = df,
units = unit_cols,
hoo_rules = HOO_rules_model
)
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$Modality
if(mod == "verbal")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 5))*1
if(mod == "gesture")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 5))*1
if(mod == "gaze")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 3))*1
else
return(0)
},
time.column = "Start",
return.ena.set = FALSE,
mode.column = "Modality"
)
# Make set
# ona_multimodal_tif_set <- model(ona_multimodal_tif_accum)
# MR, CE2 vs. 5
my_rotation.params =
list(CE2 = ona_multimodal_tif_set$meta.data$classroom$CE2,
`5` = ona_multimodal_tif_set$meta.data$classroom$`5`)
set <-
model(accum,                                 # The previously run accumulation above
rotate.using ="mean",                  # Function provided by ONA
rotation.params = my_rotation.params   # The defined paremeters for rotation
)
# Set local working directory
# setwd("~/Desktop/epistemic_analytics/lyon_collab")
# knitr::opts_knit$set(root.dir = '~/Documents/GitHub/lyon_collab')
# Reinstallation sequence for ONA package
# remove.packages("ona")
# install.packages("ona", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/ona/cran/", "https://cran.rstudio.org"))
# remove.packages("tma")
# install.packages("tma", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/tma/cran/", "https://cran.rstudio.org"))
# Load necessary libraries
library(rENA)
library(ona)
library(tma)
library(readxl)
library(tidyverse)
# Source plotter code
# source("~/Desktop/epistemic_analytics/lyon_collab/code/ona_plotter_lyon.R")
# Read in dataset, remove unnecessary columns
df <- read.csv("~/Desktop/epistemic_analytics/lyon_collab/data/LetsPlay_TMA_1stmodel.csv") %>%
select(-X)
# Fix line 6502
df[6502,6] <- "gaze"
df[6502,15]<- 1
df[,15] <- as.numeric(df[,15])
# Define units, codes, metadata, and HOO rules
unit_cols <- c("classroom", "group", "actor")
code_cols <- c("multimodal.relevance_correct..hors.pertinence.linguistique.", "multimodal.relevance_correct.and.complete", "multimodal.relevance_correct.and.incomplete", "multimodal.relevance_incorrect","verbal.relevance_correct.and.complete",            "verbal.relevance_correct.and.incomplete", "verbal.relevance_incorrect")
meta_cols <- c("qualitative_content", "Rules")
HOO_rules_model <- tma:::rules(
classroom %in% UNIT$classroom & group %in% UNIT$group
)
context_model <- tma:::contexts(
x = df,
units = unit_cols,
hoo_rules = HOO_rules_model
)
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$Modality
if(mod == "verbal")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 5))*1
if(mod == "gesture")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 5))*1
if(mod == "gaze")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 3))*1
else
return(0)
},
time.column = "Start",
return.ena.set = FALSE,
mode.column = "Modality"
)
# Make set
# ona_multimodal_tif_set <- model(ona_multimodal_tif_accum)
# MR, CE2 vs. 5
my_rotation.params =
list(CE2 = ona_multimodal_tif_accum$meta.data$classroom$CE2,
`5` = ona_multimodal_tif_accum$meta.data$classroom$`5`)
ona_multimodal_tif_set <-
model(ona_multimodal_tif_accum,                                 # The previously run accumulation above
rotate.using ="mean",                  # Function provided by ONA
rotation.params = my_rotation.params   # The defined paremeters for rotation
)
# Set local working directory
# setwd("~/Desktop/epistemic_analytics/lyon_collab")
# knitr::opts_knit$set(root.dir = '~/Documents/GitHub/lyon_collab')
# Reinstallation sequence for ONA package
# remove.packages("ona")
# install.packages("ona", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/ona/cran/", "https://cran.rstudio.org"))
# remove.packages("tma")
# install.packages("tma", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/tma/cran/", "https://cran.rstudio.org"))
# Load necessary libraries
library(rENA)
library(ona)
library(tma)
library(readxl)
library(tidyverse)
# Source plotter code
# source("~/Desktop/epistemic_analytics/lyon_collab/code/ona_plotter_lyon.R")
# Read in dataset, remove unnecessary columns
df <- read.csv("~/Desktop/epistemic_analytics/lyon_collab/data/LetsPlay_TMA_1stmodel.csv") %>%
select(-X)
# Fix line 6502
df[6502,6] <- "gaze"
df[6502,15]<- 1
df[,15] <- as.numeric(df[,15])
# Define units, codes, metadata, and HOO rules
unit_cols <- c("classroom", "group", "actor")
code_cols <- c("multimodal.relevance_correct..hors.pertinence.linguistique.", "multimodal.relevance_correct.and.complete", "multimodal.relevance_correct.and.incomplete", "multimodal.relevance_incorrect","verbal.relevance_correct.and.complete",            "verbal.relevance_correct.and.incomplete", "verbal.relevance_incorrect")
meta_cols <- c("qualitative_content", "Rules")
HOO_rules_model <- tma:::rules(
classroom %in% UNIT$classroom & group %in% UNIT$group
)
context_model <- tma:::contexts(
x = df,
units = unit_cols,
hoo_rules = HOO_rules_model
)
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$Modality
if(mod == "verbal")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 5))*1
if(mod == "gesture")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 5))*1
if(mod == "gaze")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 3))*1
else
return(0)
},
time.column = "Start",
return.ena.set = FALSE,
mode.column = "Modality"
)
# Make set
# ona_multimodal_tif_set <- model(ona_multimodal_tif_accum)
# MR, CE2 vs. 5
my_rotation.params =
list(CE2 = ona_multimodal_tif_accum$meta.data$classroom == "CE2",
`5` = ona_multimodal_tif_accum$meta.data$classroom == "5")
ona_multimodal_tif_set <-
model(ona_multimodal_tif_accum,                                 # The previously run accumulation above
rotate.using ="mean",                  # Function provided by ONA
rotation.params = my_rotation.params   # The defined paremeters for rotation
)
# Pearson's R
ona_multimodal_tif_gof <- ona:::correlations(ona_multimodal_tif_set)$pearson
ona_multimodal_tif_gof[[1]]
ona_multimodal_tif_SVD <- lm(ona_multimodal_tif_set$points$SVD1 ~ ona_multimodal_tif_set$points$classroom) %>% summary()
ona_multimodal_tif_SVD <- lm(ona_multimodal_tif_set$points$MR1 ~ ona_multimodal_tif_set$points$classroom) %>% summary()
ona_multimodal_tif_SVD$r.squared
source("~/Desktop/epistemic_analytics/lyon_collab/code/rq_ona_plotter_lyon.R")
# Plot ONA plot
make.ona.plot(ona_multimodal_tif_set,
"Lyon Multimodal Model")
source("~/Desktop/epistemic_analytics/lyon_collab/code/rq_ona_plotter_lyon.R")
# Plot ONA plot
make.ona.plot(ona_multimodal_tif_set,
"Lyon Multimodal Model", flip_x = TRUE)
source("~/Desktop/epistemic_analytics/lyon_collab/code/rq_ona_plotter_lyon.R")
# Plot ONA plot
make.ona.plot(ona_multimodal_tif_set,
"Lyon Multimodal Model")
source("~/Desktop/epistemic_analytics/lyon_collab/code/rq_ona_plotter_lyon.R")
# Plot ONA plot
make.ona.plot(ona_multimodal_tif_set,
"Lyon Multimodal Model")
source("~/Desktop/epistemic_analytics/lyon_collab/code/rq_ona_plotter_lyon.R")
# Plot ONA plot
make.ona.plot(ona_multimodal_tif_set,
"Lyon Multimodal Model")
source("~/Desktop/epistemic_analytics/lyon_collab/code/rq_ona_plotter_lyon.R")
# Plot ONA plot
make.ona.plot(ona_multimodal_tif_set,
"Lyon Multimodal Model")
source("~/Desktop/epistemic_analytics/lyon_collab/code/rq_ona_plotter_lyon.R")
# Plot ONA plot
make.ona.plot(ona_multimodal_tif_set,
"Lyon Multimodal Model")
source("~/Desktop/epistemic_analytics/lyon_collab/code/rq_ona_plotter_lyon.R")
# Plot ONA plot
make.ona.plot(ona_multimodal_tif_set,
"Lyon Multimodal Model")
# Set local working directory
# setwd("~/Desktop/epistemic_analytics/lyon_collab")
# knitr::opts_knit$set(root.dir = '~/Documents/GitHub/lyon_collab')
# Reinstallation sequence for ONA package
# remove.packages("ona")
# install.packages("ona", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/ona/cran/", "https://cran.rstudio.org"))
# remove.packages("tma")
# install.packages("tma", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/tma/cran/", "https://cran.rstudio.org"))
# Load necessary libraries
library(rENA)
library(ona)
library(tma)
library(readxl)
library(tidyverse)
# Source plotter code
# source("~/Desktop/epistemic_analytics/lyon_collab/code/ona_plotter_lyon.R")
# Read in dataset, remove unnecessary columns
df <- read.csv("~/Desktop/epistemic_analytics/lyon_collab/data/LetsPlay_TMA_1stmodel.csv") %>%
select(-X)
# Fix line 6502
df[6502,6] <- "gaze"
df[6502,15]<- 1
df[,15] <- as.numeric(df[,15])
# Define units, codes, metadata, and HOO rules
unit_cols <- c("classroom", "group", "actor")
code_cols <- c("multimodal.relevance_correct..hors.pertinence.linguistique.", "multimodal.relevance_correct.and.complete", "multimodal.relevance_correct.and.incomplete", "multimodal.relevance_incorrect","verbal.relevance_correct.and.complete",            "verbal.relevance_correct.and.incomplete", "verbal.relevance_incorrect")
meta_cols <- c("qualitative_content", "Rules")
HOO_rules_model <- tma:::rules(
classroom %in% UNIT$classroom & group %in% UNIT$group
)
context_model <- tma:::contexts(
x = df,
units = unit_cols,
hoo_rules = HOO_rules_model
)
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$Modality
if(mod == "verbal")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 15))*1
if(mod == "gesture")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 10))*1
if(mod == "gaze")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 5))*1
else
return(0)
},
time.column = "Start",
return.ena.set = FALSE,
mode.column = "Modality"
)
# Make set
# ona_multimodal_tif_set <- model(ona_multimodal_tif_accum)
# MR, CE2 vs. 5
my_rotation.params =
list(CE2 = ona_multimodal_tif_accum$meta.data$classroom == "CE2",
`5` = ona_multimodal_tif_accum$meta.data$classroom == "5")
ona_multimodal_tif_set <-
model(ona_multimodal_tif_accum,                                 # The previously run accumulation above
rotate.using ="mean",                  # Function provided by ONA
rotation.params = my_rotation.params   # The defined paremeters for rotation
)
# Pearson's R
ona_multimodal_tif_gof <- ona:::correlations(ona_multimodal_tif_set)$pearson
ona_multimodal_tif_gof[[1]]
ona_multimodal_tif_SVD <- lm(ona_multimodal_tif_set$points$MR1 ~ ona_multimodal_tif_set$points$classroom) %>% summary()
ona_multimodal_tif_SVD$r.squared
source("~/Desktop/epistemic_analytics/lyon_collab/code/rq_ona_plotter_lyon.R")
# Plot ONA plot
make.ona.plot(ona_multimodal_tif_set,
"Lyon Multimodal Model")
# Pairwise t test with BH corrections, providing statistical warrant for ONA-score-togetherness observation
pairwise.t.test(ona_multimodal_tif_set$points$SVD1, ona_multimodal_tif_set$points$classroom, p.adjust.method = "BH")
# Pairwise t test with BH corrections, providing statistical warrant for ONA-score-togetherness observation
pairwise.t.test(ona_multimodal_tif_set$points$MR1, ona_multimodal_tif_set$points$classroom, p.adjust.method = "BH")
